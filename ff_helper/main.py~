import json
import os
from datetime import datetime
from settings.api_config import API_BASE_URL, API_HEADERS, ENDPOINTS
from functions.api_call import make_api_call
from settings.paths_config import GAME_INFO_DIR
from functions.save_data import save_data_to_file  # Import the new save function

def handle_response(response):
    try:
        response.raise_for_status()
        data = response.json()
        print(json.dumps(data, indent=4))
        return data
    except requests.exceptions.HTTPError as http_err:
        print(f"HTTP error occurred: {http_err}")
    except requests.exceptions.RequestException as err:
        print(f"Request error occurred: {err}")
    except json.JSONDecodeError:
        print("Failed to parse JSON response.")
        return None

def main():
    # Automatically get the current year
    current_year = datetime.now().year

    # Ask for the week number
    week = input("Enter the week number: ").strip()

    # Build the full URL using the endpoint and user input
    user_input = "game_info"  # Since this is fixed for now
    endpoint = ENDPOINTS[user_input].format(week=week, season=current_year)
    url = f"{API_BASE_URL}{endpoint}"

    # Make the API call
    response = make_api_call(url, API_HEADERS)

    # Handle the response and return the data
    data = handle_response(response)

    if data:
        # Ask the user if they want to save the data
        save_option = input("Would you like to save this data? (yes/no): ").strip().lower()

        if save_option == 'yes':
            # Ask the user if they want to save as JSON or CSV
            file_format = input("In which format? (json/csv): ").strip().lower()

            # Construct the file path based on the format
            file_extension = "json" if file_format == 'json' else "csv"
            file_name = f"game_info_week_{week}_season_{current_year}.{file_extension}"
            file_path = os.path.join(GAME_INFO_DIR, file_name)

            # Save the data using the imported function
            save_data_to_file(data, file_path, file_format)

if __name__ == "__main__":
    main()

